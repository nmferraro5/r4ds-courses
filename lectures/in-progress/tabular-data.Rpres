

Visualization basics
============================================================
type: section

ggplot2
=============================================================
- `ggplot2` is a very powerful graphics package.
- gg stands for "grammar of graphics"
- It was installed and loaded as part of `tidyverse`.
- Otherwise, you must do the following:
```{r eval=FALSE}
install.packages("ggplot2")
library("ggplot2")
```
```{r include=FALSE}
## better font size for slides
theme_set(theme_grey(base_size = 22))
```


A simple scatterplot
=============================================================
```{r}
ggplot(data = mtc, mapping = aes(x = hp, y = mpg)) +
  geom_point()
```
- Note that, although the package is named `ggplot2`, the function is called simply `ggplot()`

How to call ggplot
==============================================================
```{r, prompt=FALSE,eval=FALSE,tidy=FALSE}
ggplot(data = mtc, mapping = aes(x = hp, y = mpg)) + geom_point()
```
- `data = mtc`: this tells which tibble contains the data to be plotted
- `mapping = aes(x = hp, y = mpg)`: use the data in the hp column on x-axis, mpg column on y-axis
- `geom_point()`: plot the data as points
- Note that you can use positional instead of named arguments to make this expression shorter:
```{r prompt=FALSE,eval=FALSE}
ggplot(mtc, aes(hp, mpg)) +
  geom_point()
```
- The use of "+" to glue these operations together will be explained later.


Change points to lines
===============================================================
```{r}
ggplot(mtc, aes(hp, mpg)) +
  geom_line()
```
- This is pretty ugly. Line plots are better for time series.


Fit straight line to points
===============================================================
```{r}
ggplot(mtc, aes(hp, mpg)) +
  geom_point() +
  geom_smooth(method="lm")
```
- `"lm"` means "linear model," which is a least-squares regression line.
- The gray band is the confidence interval.


Fit smooth line to points
================================================================
```{r}
ggplot(mtc, aes(hp, mpg)) +
  geom_point() +
  geom_smooth(method="loess")
```
- "loess" fits a collection of tiny regression lines, then glues them together.
- This is a better approximation than a straight line for these data.


Fit smooth line to points without standard error
================================================================
```{r}
mtc %>% # with the pipe
ggplot(aes(hp, mpg)) +
  geom_point() +
  geom_smooth(method="loess", se=FALSE)
```
- `se = FALSE` means do not plot the confidence band (using the standard error)

Plotting categorical variables
====================================================================
- `gender` is a discrete variable, with two values.
```{r}
data1 %>%
  group_by(gender) %>%
  summarize(mean_age=mean(age), mean_weight=mean(weight)) %>%
ggplot(aes(gender, mean_weight)) +
  geom_col()
```
- `geom_col()` is used to make a bar plot. Height of bar is the value for that group.

The grammar of graphics
============================================================
- Most graphics systems are a large collection of functions to call to
construct a graph piece by piece.
- `ggplot2` is different, and is based on the idea of a "grammar of
graphics," a set of primitives and rules for combining them in a way
that makes sense for plotting data.
- This perspective is quite powerful, but requires learning a bit of
vocabulary and a new way of thinking about graphics.


The ggplot2 model (simplified version)
============================================================
1. supply data frame (rows of observations, columns of variables)
2. use `aes` to map from variables (columns in data frame) to
aethetics (visual properties of the plot): x, y, color, size,
shape, and others.
3. choose a `geom`. This determines the type of the plot: point (a
scatterplot), line (line graph or line chart), bar (barplot), and
others.
4. choose a `stat` (statistical transformation): often `identity` (do
no transformation), but can be used to count, bin, or summarize
data (e.g., in a histogram).
5. choose a `scale`. This converts from the units used in the data
frame to the units used for display.
6. provide optional facet specification.

ggplot2 cheatsheet
============================================================
<div align="center">
<img src="https://www.rstudio.com/wp-content/uploads/2018/08/data-visualization-2.1.png", height=1000, width=1400>
</div>

Putting it together
=================================================================
type: section

Exercise: Is there a linear relationship between hp and 1/mpg?
=================================================================
- Use `ggplot` to look for a linear relationship between `hp` and `1/mpg` in our `mtc` data


Answer: Is there a linear relationship between hp and 1/mpg?
=================================================================
```{r}
ggplot(mtc, aes(hp, 1/mpg)) +
  geom_point() +
  geom_smooth(method="lm", se=FALSE)
```
- So, probably "yes"

Answer: Is there a linear relationship between hp and 1/mpg?
=================================================================
- Could also have done:
```{r, eval=F}
mtc %>%
  mutate(gpm = 1/mpg) %>%
ggplot(aes(hp, gpm)) +
  geom_point() +
  geom_smooth(method="lm", se=FALSE)
```

Exercise: orange trees
=================================================================
```{r}
orange <- as_tibble(Orange) # this data is pre-loaded into R
```
1. Pull out the data for tree 2 only
2. Plot circumference versus age for those data

Answer: orange trees
==================================================================
```{r}
orange %>%
  filter(Tree == 2) %>%
ggplot(aes(age, circumference)) +
  geom_point()
```


Exercise: more orange trees
============================================================
1. Pull out the data for tree 2 where `age > 1000`
2. Plot circumference versus age for those data

Answer: more orange trees
==================================================================
```{r}
orange %>%
  filter(Tree == 2, age > 1000) %>%
ggplot(aes(age, circumference)) +
  geom_point()
```


Exercise: even more orange trees
============================================================
- Add a new column called `circum_in` which is the circumference in inches, not in millimeters.


Answer: even more orange trees
=================================================================
```{r}
mutate(orange, circum_in = circumference/(10 * 2.54))
```


Exercise: compute mean area per region
=====================================================================
Use the `state_data` data frame for this exercise.
- What is the mean area for each region?
- Sort the result by decreasing area.


Answer: compute mean area per region
=====================================================================
```{r}
state_data %>%
  group_by(region) %>%
  summarize(mean_area = mean(area)) %>%
  arrange(desc(mean_area))
```


Exercise: Sort the regions by area range
=====================================================================
- Sort the regions by the difference between the areas of the largest and smallest state in each region.


Answer: Sort the regions by area range
=====================================================================
```{r}
state_data %>%
  group_by(region) %>%
  summarize(area_range = max(area) - min(area)) %>%
  arrange(area_range)
```


Adding new column with data by group
=====================================================================
```{r}
state_data2 <- state_data %>%
  group_by(region) %>%
  mutate(region_mean = mean(area))
state_data2
```
- This computes the mean area for each region, and places those values in a new column.
- The `region_mean` column has 50 values, one for each state, depending on the region the state is in.


Exercise: closest to region mean
=====================================================================
- Which state is closest to the mean of its region?


Answer: closest to region mean
=====================================================================
```{r}
state_data2 %>%
    mutate(diff = abs(area-region_mean)) %>%
    filter(diff == min(diff))
```

- We should use `ungroup()` to undo the `group_by()` so that the `filter()` is applied across the whole data frame and not region-by-region

```{r}
state_data2 %>%
    mutate(diff = abs(area-region_mean)) %>%
    ungroup() %>%
    filter(diff == min(diff))
```
- Answer: Florida



Exercise: smallest state in each region
=====================================================================
- What is the smallest state in each region?


Answer: smallest state in each region
=====================================================================
```{r}
state_data %>%
    group_by(region) %>%
    filter(area == min(area))
```


Relational data and joins
============================================================
type: section
```{r}
# install.packages("nycflights13")
library(nycflights13)
```


Relational data
=====================================================================
class: small-code

```{r}
head(flights)
```
```{r}
head(airports)
```

***

```{r}
head(planes)
```
```{r}
head(weather)
```

Relational data
===

<div align="center">
<img src="https://d33wubrfki0l68.cloudfront.net/245292d1ea724f6c3fd8a92063dcd7bfb9758d02/5751b/diagrams/relational-nycflights.png">
</div>

- `flights` connects to `planes` via a single variable, `tailnum`.
- `flights` connects to `airlines` through the `carrier` variable.
- `flights` connects to `airports` in two ways: via the `origin` and `dest` variables.
- `flights` connects to `weather` via `origin` (the location), and `year`, `month`, `day` and `hour` (the time).

An example join
===
- Imagine we want to add the full airline name to some columns from `flights`
```{r}
flights %>%
  select(tailnum, origin, dest, carrier) %>%
  inner_join(airlines, by="carrier")
```

Joins
===
```{r}
x <- tibble(
  key = c(1,2,3),
  val_x = c("x1","x2","x3")
)
y <- tibble(
  key = c(1,2,4),
  val_y = c("y1","y2","y3")
)
```

<div align="center">
<img src="https://d33wubrfki0l68.cloudfront.net/108c0749d084c03103f8e1e8276c20e06357b124/5f113/diagrams/join-setup.png">
</div>

***

```{r}
inner_join(x, y, by="key")
```
- An inner join matches pairs of observations when their keys are equal
- the column that is joined on is specified with the named argument `by="column"`

<div align="center">
<img src="https://d33wubrfki0l68.cloudfront.net/3abea0b730526c3f053a3838953c35a0ccbe8980/7f29b/diagrams/join-inner.png">
</div>

Duplicate keys
===
```{r}
x <- tibble(
  key = c(1,2,2,3),
  val_x = c("x1","x2","x3","x4")
)
y <- tibble(
  key = c(1,2,2,4),
  val_y = c("y1","y2","y3","y4")
)
```

<div align="center">
<img src="https://d33wubrfki0l68.cloudfront.net/d37530bbf7749f48c02684013ae72b2996b07e25/37510/diagrams/join-many-to-many.png">
</div>

***

```{r}
inner_join(x, y, by="key")
```

When keys are duplicated, multiple rows can match multiple rows, so each possible combination is produced

Specifying the keys
===
```{r}
inner_join(airports, flights, by="origin")
```
- Why does this fail?

Specifying the keys
===
- When keys have different names in different dataframes, the syntax to join is:
```{r}
inner_join(airports, flights, by=c("faa"="origin"))
```

Exercise: finding planes
===
Use joins to find the models of airplane that fly into Seattle Tacoma Intl.

Answer: finding planes
===
Use joins to find the models of airplane that fly into Seattle Tacoma Intl.
```{r}
airports %>%
  filter(name=="Seattle Tacoma Intl") %>%
  inner_join(flights, by=c("faa"="dest")) %>%
  inner_join(planes, by="tailnum") %>%
  select(model) %>%
  distinct()
```

Other joins
===
- A left join keeps all observations in `x`.
- A right join keeps all observations in `y`.
- A full join keeps all observations in `x` and `y`.

<div align="center">
<img src="https://d33wubrfki0l68.cloudfront.net/9c12ca9e12ed26a7c5d2aa08e36d2ac4fb593f1e/79980/diagrams/join-outer.png">
</div>

- Left join should be your default
  - it looks up additional information in other tables
  - preserves all rows in the table you're most interested in

***

<div align="center">
<img src="https://d33wubrfki0l68.cloudfront.net/aeab386461820b029b7e7606ccff1286f623bae1/ef0d4/diagrams/join-venn.png">
</div>

Joining on multiple columns
===
- It is often desirable to find matches along more than one column
```{r}
flights %>%
  select(tailnum, year:day, hour, origin) %>%
  left_join(weather, by=c("year", "month", "day", "hour", "origin")) %>%
  head(3)
```
- This is also possible if the columns have different names
```{r, eval=F}
flights %>%
  select(tailnum, year:day, hour, origin) %>%
  rename(departure = origin) %>%
  left_join(weather, by=c("year", "month", "day", "hour", "departure"="origin"))
```

Join problems
===
- Joins can be a source of subtle errors in your code
- check for `NA`s in variables you are going to join on
- make sure rows aren't being dropped if you don't intend to drop rows
  - checking the number of rows before and after the join is not sufficient. If you have an inner join with duplicate keys in both tables, you might get unlucky as the number of dropped rows might exactly equal the number of duplicated rows
- `anti_join()` and `semi_join()` are useful tools (filtering joins) to diagnose problems
  - `anti_join()` keeps only the rows in `x` that *don't* have a match in `y`
  - `semi_join()` keeps only the rows in `x` that *do* have a match in `y`

Exercise: nonexistent planes
====
It appears some of the `tailnum`s in `flights` do not appear in `planes`. Is there something those flights have in common that might help us diagnose the issue?

Answer: nonexistent planes
====
```{r}
bad_flight_carrier_count = flights %>%
  anti_join(planes, by="tailnum") %>%
  sample_n(10)
```

Answer: nonexistent planes
====
It appears some of the `tailnum`s in `flights` do not appear in `planes`. Is there something those flights have in common that might help us diagnose the issue?
```{r}
bad_flight_carrier_count = flights %>%
  anti_join(planes, by="tailnum") %>%
  count(carrier) %>%
  arrange(desc(n))
bad_flight_carrier_count
```

- `count(x)` is a shortcut for `group_by(x) %>% summarize(n=n())`

***

Let's compare the counts of airlines with missing planes to the counts of airlines across all flight data
```{r}
flight_carrier_count = flights %>%
  count(carrier) %>%
  arrange(desc(n))
flight_carrier_count
```

Answer: nonexistent planes
====
We can already see the trend but let's clean it up a bit
```{r, eval=F}
flight_carrier_count %>%
  left_join(bad_flight_carrier_count,
            by="carrier",
            suffix=c("_all", "_bad")) %>%
  replace_na(list(n_bad=0)) %>%
  mutate(bad_ratio = n_bad/n_all) %>%
  left_join(airlines, by="carrier") %>%
ggplot(aes(y=name, x=bad_ratio)) +
  geom_point()
```

***

```{r, echo=F}
flight_carrier_count %>%
  left_join(bad_flight_carrier_count,
            by="carrier",
            suffix=c("_all", "_bad")) %>%
  replace_na(list(n_bad=0)) %>%
  mutate(bad_ratio = n_bad/n_all) %>%
  left_join(airlines, by="carrier") %>%
ggplot(aes(y=name, x=bad_ratio)) +
  geom_point()
```

- Envoy Air and American Airlines are the culprits!


Reproducible analysis
============================================================
type: section


Reproducible analysis
========================================================

The goal of reproducible analysis is to produce a computational
artifact that others can view, scrutinize, test, and run, to convince
themselves that your ideas are valid. (It's also good for you to be as
skeptical of your work.) This means you should write code to be run
more than once and by others.

Doing so requires being organized in several ways:

- Combining text with code (the focus of this section)
- Project/directory organization
- Version control

The problem
========================================================
- You write text in a word processor.
- You write code to compute with data and produce output and
graphics.
- These are performed using different software.
- So when integrating both kinds of information into a notebook,
report, or publication, it is very easy to make mistakes,
copy/paste the wrong version, and have information out of sync.


A solution
========================================================
- Write text and code in the same file.
- Use special syntax to separate text from code.
- Use special syntax for annotating the text with formatting
operations (if desired).
- RStudio can then:
1. run the code blocks,
2. insert the output and graphs at the correct spot in the text,
3. then call a text processor for final formatting.
- This whole process is called "knitting".
- (live demo)
- jupyter notebooks (outside of RStudio) are an alternative for doing the same thing


R Markdown: The special syntax for formatting text
========================================================
- RStudio supports a simple and easy-to-use format called "R Markdown".
- This is a very simple markup language:
- use * or _ around italics.
- use ** or __ around bold.
- Markdown Quick Reference (RStudio internal help)
- [Introduction to R Markdown](http://shiny.rstudio.com/articles/rmarkdown.html)
- [R Markdown web page](http://rmarkdown.rstudio.com/)
- [R Markdown Cheat Sheet](http://shiny.rstudio.com/articles/rm-cheatsheet.html)
